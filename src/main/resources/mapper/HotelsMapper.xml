<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.travel.travel.repository.HotelsMapper">
  <resultMap id="BaseResultMap" type="com.travel.travel.entity.Hotels">
    <id column="hotel_id" jdbcType="INTEGER" property="hotelId" />
    <result column="hotel_name" jdbcType="VARCHAR" property="hotelName" />
    <result column="hotel_scenic" jdbcType="INTEGER" property="hotelScenic" />
    <result column="hotel_addr" jdbcType="VARCHAR" property="hotelAddr" />
    <result column="hotel_phone" jdbcType="VARCHAR" property="hotelPhone" />
    <result column="hotel_img" jdbcType="VARCHAR" property="hotelImg" />
    <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    <result column="scenic_name" jdbcType="VARCHAR" property="scenicName" />
  </resultMap>
  <sql id="Base_Column_List">
    hotel_id, hotel_name, hotel_scenic, hotel_addr, hotel_phone, hotel_img, is_delete
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select  h.hotel_id,
    h.hotel_name,
    h.hotel_scenic,
    h.hotel_addr,
    h.hotel_phone,
    h.hotel_img,
    h.is_delete,
    s.scenic_name
    from hotels h,scenics s
    where h.is_delete=0
    and h.hotel_scenic=s.scenic_id
    and h.hotel_id = #{hotelId,jdbcType=INTEGER}
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    update  hotels
    set is_delete=1
    where hotel_id = #{hotelId,jdbcType=INTEGER}
  </update>
  <insert id="insert" parameterType="com.travel.travel.entity.Hotels">
    insert into hotels ( hotel_name, hotel_scenic,
      hotel_addr, hotel_phone, hotel_img, 
      is_delete)
    values ( #{hotelName,jdbcType=VARCHAR}, #{hotelScenic,jdbcType=INTEGER},
      #{hotelAddr,jdbcType=VARCHAR}, #{hotelPhone,jdbcType=VARCHAR}, #{hotelImg,jdbcType=VARCHAR}, 
     0)
  </insert>
  <insert id="insertSelective" parameterType="com.travel.travel.entity.Hotels">
    insert into hotels
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="hotelId != null">
        hotel_id,
      </if>
      <if test="hotelName != null">
        hotel_name,
      </if>
      <if test="hotelScenic != null">
        hotel_scenic,
      </if>
      <if test="hotelAddr != null">
        hotel_addr,
      </if>
      <if test="hotelPhone != null">
        hotel_phone,
      </if>
      <if test="hotelImg != null">
        hotel_img,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="hotelId != null">
        #{hotelId,jdbcType=INTEGER},
      </if>
      <if test="hotelName != null">
        #{hotelName,jdbcType=VARCHAR},
      </if>
      <if test="hotelScenic != null">
        #{hotelScenic,jdbcType=INTEGER},
      </if>
      <if test="hotelAddr != null">
        #{hotelAddr,jdbcType=VARCHAR},
      </if>
      <if test="hotelPhone != null">
        #{hotelPhone,jdbcType=VARCHAR},
      </if>
      <if test="hotelImg != null">
        #{hotelImg,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.travel.travel.entity.Hotels">
    update hotels
    <set>
      <if test="hotelName != null">
        hotel_name = #{hotelName,jdbcType=VARCHAR},
      </if>
      <if test="hotelScenic != null">
        hotel_scenic = #{hotelScenic,jdbcType=INTEGER},
      </if>
      <if test="hotelAddr != null">
        hotel_addr = #{hotelAddr,jdbcType=VARCHAR},
      </if>
      <if test="hotelPhone != null">
        hotel_phone = #{hotelPhone,jdbcType=VARCHAR},
      </if>
      <if test="hotelImg != null">
        hotel_img = #{hotelImg,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
    </set>
    where hotel_id = #{hotelId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.travel.travel.entity.Hotels">
    update hotels
    set hotel_name = #{hotelName,jdbcType=VARCHAR},
      hotel_scenic = #{hotelScenic ,jdbcType=INTEGER},
      hotel_addr = #{hotelAddr,jdbcType=VARCHAR},
      hotel_phone = #{hotelPhone,jdbcType=VARCHAR},
      hotel_img = #{hotelImg,jdbcType=VARCHAR},
      is_delete = 0
    where hotel_id = #{hotelId,jdbcType=INTEGER}
  </update>

  <select id="getAllHotels" resultMap="BaseResultMap">
    select  h.hotel_id,
    h.hotel_name,
    h.hotel_scenic,
    h.hotel_addr,
    h.hotel_phone,
    h.hotel_img,
    h.is_delete,
    s.scenic_name
    from hotels h,scenics s
    where h.is_delete=0
    and h.hotel_scenic=s.scenic_id
    <if test="hotelName != null and hotelName!=''">
      and h.hotel_name like CONCAT ('%',#{hotelName,jdbcType=VARCHAR},'%')
    </if>
    <if test="hotelScenic != null and hotelScenic!=0">
      and h.hotel_scenic= #{hotelScenic,jdbcType=INTEGER}
    </if>
    order by h.hotel_id limit #{current}, #{size}
  </select>
  <select id="getAllHotelsCount" resultType="java.lang.Integer">
    select count(1)
    from hotels h
    where h.is_delete=0
    <if test="hotelName != null and hotelName!=''">
      and h.hotel_name like CONCAT ('%',#{hotelName,jdbcType=VARCHAR},'%')
    </if>
    <if test="hotelScenic != null and hotelScenic!=0">
      and h.hotel_scenic= #{hotelScenic,jdbcType=INTEGER}
    </if>
  </select>

  <select id="getAll" resultMap="BaseResultMap">
    select  h.hotel_id,
    h.hotel_name,
    h.hotel_scenic,
    h.hotel_addr,
    h.hotel_phone,
    h.hotel_img,
    h.is_delete,
    s.scenic_name
    from hotels h,scenics s
    where h.is_delete=0
    and h.hotel_scenic=s.scenic_id
  </select>

  <select id="getHotelInit" resultMap="BaseResultMap">
    select  h.hotel_id,
    h.hotel_name,
    h.hotel_scenic,
    h.hotel_addr,
    h.hotel_phone,
    h.hotel_img,
    h.is_delete,
    s.scenic_name
    from hotels h
    left join scenics s
    on h.hotel_scenic=s.scenic_id
    <if test="sortType==2 or sortType==3">
      left join orders o
      on h.hotel_id=o.line_or_hotel_id
    </if>
    <if test="sortType==3">
      left join evaluates e
      on o.order_id=e.order_id
    </if>
    where h.is_delete=0
    <if test="hotelName != null and hotelName!=''">
      and h.hotel_name like CONCAT ('%',#{hotelName,jdbcType=VARCHAR},'%')
    </if>
    <if test="cityId!=null and cityId!=0">
      and s.scenic_city=#{cityId,jdbcType=INTEGER}
    </if>
    <if test="sortType==2 or sortType==3">
      and (o.order_type=2 or o.order_type=2 IS NULL )
    </if>
    <if test="sortType==3">
      and (e.evaluate_level=4 or e.evaluate_level=5 or e.evaluate_level IS  NULL )
    </if>
    <if test="sortType==2 or sortType==3">
    group by o.line_or_hotel_id
      order by count(o.line_or_hotel_id) limit #{current}, #{size}
    </if>
    <if test="sortType==1">
      order by RAND() limit 16
    </if>
    <if test="sortType==0">
      order by CONVERT(h.hotel_name USING gbk) limit #{current}, #{size}
    </if>

  </select>
  <select id="getHotelInitCount" resultType="java.lang.Integer">
    select count(1)
    from hotels h
    left join scenics s
    on h.hotel_scenic=s.scenic_id
    <if test="sortType==2 or sortType==3">
      left join orders o
      on h.hotel_id=o.line_or_hotel_id
    </if>
    <if test="sortType==3">
      left join evaluates e
      on o.order_id=e.order_id
    </if>
    where h.is_delete=0
    <if test="hotelName != null and hotelName!=''">
      and h.hotel_name like CONCAT ('%',#{hotelName,jdbcType=VARCHAR},'%')
    </if>
    <if test="cityId!=null and cityId!=0">
      and s.scenic_city=#{cityId,jdbcType=INTEGER}
    </if>
    <if test="sortType==2 or sortType==3">
      and (o.order_type=2 or o.order_type=2 IS NULL )
    </if>
    <if test="sortType==3">
      and (e.evaluate_level=4 or e.evaluate_level=5 or e.evaluate_level IS  NULL )
    </if>
  </select>
</mapper>