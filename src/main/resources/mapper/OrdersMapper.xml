<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.travel.travel.repository.OrdersMapper">
  <resultMap id="BaseResultMap" type="com.travel.travel.entity.Orders">
    <id column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="order_name" jdbcType="VARCHAR" property="orderName" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="line_or_hotel_id" jdbcType="INTEGER" property="lineOrHotelId" />
    <result column="order_type" jdbcType="INTEGER" property="orderType" />
    <result column="in_date" jdbcType="TIMESTAMP" property="inDate" />
    <result column="leave_date" jdbcType="TIMESTAMP" property="leaveDate" />
    <result column="order_count" jdbcType="INTEGER" property="orderCount" />
    <result column="order_singel_price" jdbcType="DOUBLE" property="orderSingelPrice" />
    <result column="order_total_price" jdbcType="DOUBLE" property="orderTotalPrice" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    <result column="creat_time" jdbcType="TIMESTAMP" property="creatTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="room_id" jdbcType="INTEGER" property="roomId" />
    <result column="user_is_delete" jdbcType="INTEGER" property="userIsDelete" />
    <result column="typeName" jdbcType="VARCHAR" property="typeName" />
    <result column="roomName" jdbcType="VARCHAR" property="roomName" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="orderImg" jdbcType="VARCHAR" property="orderImg" />
    <result column="hotel_id" jdbcType="INTEGER" property="hotelId" />
    <result column="room_count" jdbcType="INTEGER" property="roomCount" />
  </resultMap>
  <resultMap id="OrderResultMap" type="com.travel.travel.entity.OrderResultMap">
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="city_name" jdbcType="VARCHAR" property="cityName" />
    <result column="province_name" jdbcType="VARCHAR" property="provinceName" />
    <result column="scenic_addr" jdbcType="VARCHAR" property="scenicAddr" />
    <result column="scenic_name" jdbcType="VARCHAR" property="scenicName" />
    <result column="line_title" jdbcType="VARCHAR" property="lineTitle" />
    <result column="theme_name" jdbcType="VARCHAR" property="themeName" />
    <result column="days" jdbcType="VARCHAR" property="days" />
  </resultMap>
  <sql id="Base_Column_List">
    order_id, order_name, user_id, line_or_hotel_id, order_type, in_date, leave_date, 
    order_count, order_singel_price, order_total_price, order_status, is_delete, creat_time, 
    update_time, room_id, user_is_delete,hotel_id,room_count
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from orders
    where order_id = #{orderId,jdbcType=VARCHAR}
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.String">
    update  orders
    set is_delete=1
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>
  <update id="autoOrderDelete" >
    update orders set order_status=5 where creat_time &lt;= SUBDATE(now(),interval -15 minute)
    and order_status=0
  </update>
  <update id="autoOrderAccept" >
    update  orders
    set order_status=1
    where creat_time &lt;= SUBDATE(now(),interval -3 day) and order_status=4
  </update>
  <update id="deleteByPrimaryKeyUser" parameterType="java.lang.String">
    update  orders
    set user_is_delete=1
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>
  <insert id="insert" parameterType="com.travel.travel.entity.Orders">
    insert into orders (order_id,order_name, user_id,
      line_or_hotel_id, order_type, in_date, 
      leave_date, order_count, order_singel_price, 
      order_total_price, order_status, is_delete, 
      creat_time, update_time, room_id, hotel_id,room_count,
      user_is_delete)
    values ( #{orderId,jdbcType=INTEGER}, #{orderName,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER},
      #{lineOrHotelId,jdbcType=INTEGER}, #{orderType,jdbcType=INTEGER}, #{inDate,jdbcType=TIMESTAMP}, 
      #{leaveDate,jdbcType=TIMESTAMP}, #{orderCount,jdbcType=INTEGER}, #{orderSingelPrice,jdbcType=DOUBLE}, 
      #{orderTotalPrice,jdbcType=DOUBLE}, #{orderStatus,jdbcType=INTEGER}, 0,
      #{creatTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{roomId,jdbcType=INTEGER},
      #{hotelId,jdbcType=INTEGER}, #{roomCount,jdbcType=INTEGER},
      0)
  </insert>
  <insert id="insertSelective" parameterType="com.travel.travel.entity.Orders">
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderName != null">
        order_name,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="lineOrHotelId != null">
        line_or_hotel_id,
      </if>
      <if test="orderType != null">
        order_type,
      </if>
      <if test="inDate != null">
        in_date,
      </if>
      <if test="leaveDate != null">
        leave_date,
      </if>
      <if test="orderCount != null">
        order_count,
      </if>
      <if test="orderSingelPrice != null">
        order_singel_price,
      </if>
      <if test="orderTotalPrice != null">
        order_total_price,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="creatTime != null">
        creat_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="roomId != null">
        room_id,
      </if>
      <if test="userIsDelete != null">
        user_is_delete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="orderName != null">
        #{orderName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="lineOrHotelId != null">
        #{lineOrHotelId,jdbcType=INTEGER},
      </if>
      <if test="orderType != null">
        #{orderType,jdbcType=INTEGER},
      </if>
      <if test="inDate != null">
        #{inDate,jdbcType=TIMESTAMP},
      </if>
      <if test="leaveDate != null">
        #{leaveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="orderCount != null">
        #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="orderSingelPrice != null">
        #{orderSingelPrice,jdbcType=DOUBLE},
      </if>
      <if test="orderTotalPrice != null">
        #{orderTotalPrice,jdbcType=DOUBLE},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="creatTime != null">
        #{creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=INTEGER},
      </if>
      <if test="userIsDelete != null">
        #{userIsDelete,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.travel.travel.entity.Orders">
    update orders
    <set>
      <if test="orderName != null">
        order_name = #{orderName,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="lineOrHotelId != null">
        line_or_hotel_id = #{lineOrHotelId,jdbcType=INTEGER},
      </if>
      <if test="orderType != null">
        order_type = #{orderType,jdbcType=INTEGER},
      </if>
      <if test="inDate != null">
        in_date = #{inDate,jdbcType=TIMESTAMP},
      </if>
      <if test="leaveDate != null">
        leave_date = #{leaveDate,jdbcType=TIMESTAMP},
      </if>
      <if test="orderCount != null">
        order_count = #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="orderSingelPrice != null">
        order_singel_price = #{orderSingelPrice,jdbcType=DOUBLE},
      </if>
      <if test="orderTotalPrice != null">
        order_total_price = #{orderTotalPrice,jdbcType=DOUBLE},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="creatTime != null">
        creat_time = #{creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="userIsDelete != null">
        user_is_delete = #{userIsDelete,jdbcType=INTEGER},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.travel.travel.entity.Orders">
    update orders
    set order_name = #{orderName,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      line_or_hotel_id = #{lineOrHotelId,jdbcType=INTEGER},
      order_type = #{orderType,jdbcType=INTEGER},
      in_date = #{inDate,jdbcType=TIMESTAMP},
      leave_date = #{leaveDate,jdbcType=TIMESTAMP},
      order_count = #{orderCount,jdbcType=INTEGER},
      order_singel_price = #{orderSingelPrice,jdbcType=DOUBLE},
      order_total_price = #{orderTotalPrice,jdbcType=DOUBLE},
      order_status = #{orderStatus,jdbcType=INTEGER},
      is_delete = #{isDelete,jdbcType=INTEGER},
      creat_time = #{creatTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      room_id = #{roomId,jdbcType=INTEGER},
      hotel_id=#{hotelId,jdbcType=INTEGER},
      room_count=#{roomCount,jdbcType=INTEGER},
      user_is_delete = #{userIsDelete,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>

  <select id="getAllOrders" resultMap="BaseResultMap">
    select  o.order_id,
    o.order_name,
    o.user_id,
    o.line_or_hotel_id,
    o.order_type,
    o.in_date,
    o.leave_date,
    o.order_count,
    o.order_singel_price,
    o.order_total_price,
    o.order_status,
    o.is_delete,
    o.creat_time,
    o.update_time,
    o.room_id,
    o.user_is_delete,
    u.user_name,
    o.hotel_id,
    o.room_count,
    (case
    when(o.order_type=2) then (SELECT h.hotel_img from hotels h where h.hotel_id=o.hotel_id)
    when(o.order_type=1) then (SELECT l.line_photo from `lines` l,line_group lg where lg.id=o.line_or_hotel_id and lg.line_id=l.line_id)
    end )as orderImg,
    (case
    when(o.order_type=2) then (SELECT h.hotel_name from hotels h where h.hotel_id=hotel_id)
    when(o.order_type=1) then (SELECT l.line_title from `lines` l where l.line_id=o.line_or_hotel_id)
    end )as typeName,
    (case
    when(o.order_type=2) then (SELECT r.hotel_room_name from hotel_rooms  r where r.hotel_room_id=o.room_id)
    end )as roomName
    from orders o,users u
    where o.is_delete=0
    and o.user_id=u.user_id
    <if test="orderName != null and orderName!=''">
      and o.order_name like CONCAT ('%',#{orderName,jdbcType=VARCHAR},'%')
    </if>
    <if test="searchType != 0 and searchType!=''">
      and o.order_type= #{searchType,jdbcType=INTEGER}
    </if>
    order by o.creat_time DESC limit #{current},#{size}
  </select>
  <select id="getAllOrdersCount" resultType="java.lang.Integer">
    select count(1)
    from orders o,users u
    where o.is_delete=0
    and o.user_id=u.user_id
    <if test="orderName != null and orderName!=''">
      and o.order_name like CONCAT ('%',#{orderName,jdbcType=VARCHAR},'%')
    </if>
    <if test="searchType != 0 and searchType!=''">
      and o.order_type= #{searchType,jdbcType=INTEGER}
    </if>
  </select>

  <select id="getAllOrdersUp" resultMap="BaseResultMap">
    select  o.order_id,
    o.order_name,
    o.user_id,
    o.line_or_hotel_id,
    o.order_type,
    o.in_date,
    o.leave_date,
    o.order_count,
    o.order_singel_price,
    o.order_total_price,
    o.order_status,
    o.is_delete,
    o.creat_time,
    o.update_time,
    o.room_id,
    o.user_is_delete,
    u.user_name,
    o.hotel_id,
    o.room_count,
    (case
    when(o.order_type=2) then (SELECT h.hotel_img from hotels h where h.hotel_id=o.hotel_id)
    when(o.order_type=1) then (SELECT l.line_photo from `lines` l,line_group lg where lg.id=o.line_or_hotel_id and lg.line_id=l.line_id)
    end )as orderImg,
    (case
    when(o.order_type=2) then (SELECT h.hotel_name from hotels h where h.hotel_id=hotel_id)
    when(o.order_type=1) then (SELECT l.line_title from `lines` l where l.line_id=o.line_or_hotel_id)
    end )as typeName,
    (case
    when(o.order_type=2) then (SELECT r.hotel_room_name from hotel_rooms  r where r.hotel_room_id=o.room_id)
    end )as roomName
    from orders o
    left join users u
    on o.user_id=u.user_id
    where o.user_is_delete=0
    <if test="orderStatus != null and orderStatus != -1">
      and o.order_status= #{orderStatus,jdbcType=INTEGER}
    </if>
    <if test="searchType != null and searchType != 0">
      and o.order_type= #{searchType,jdbcType=INTEGER}
    </if>
    <if test="orderName != null">
      and o.order_name like CONCAT ('%',#{orderName,jdbcType=VARCHAR},'%')
    </if>
    <if test="start != null and start !='' and end != null and end !=''">
      and o.create_time between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR}
    </if>
    <if test="userId != null and userId != 0">
      and o.user_id= #{userId,jdbcType=INTEGER}
    </if>
    order by o.creat_time DESC limit #{current},#{size}
  </select>
  <select id="getAllOrdersCountUp" resultType="java.lang.Integer">
    select count(1)
    from orders o
    left join users u
    on o.user_id=u.user_id
    where o.user_is_delete=0
    <if test="orderStatus != null and orderStatus != -1">
      and o.order_status= #{orderStatus,jdbcType=INTEGER}
    </if>
    <if test="searchType != null and searchType != 0">
      and o.order_type= #{searchType,jdbcType=INTEGER}
    </if>
    <if test="orderName != null">
      and o.order_name like CONCAT ('%',#{orderName,jdbcType=VARCHAR},'%')
    </if>
    <if test="start != null and start !='' and end != null and end !=''">
      and o.create_time between #{start,jdbcType=VARCHAR} and #{end,jdbcType=VARCHAR}
    </if>
    <if test="userId != null and userId != 0">
      and o.user_id= #{userId,jdbcType=INTEGER}
    </if>
  </select>
  <select id="getGroupCount" resultMap="OrderResultMap">
    SELECT count(lg.group_id)as count,g.group_name  from orders o left join line_group lg
on o.line_or_hotel_id=lg.id
left join groups g
on lg.group_id=g.group_id
where (o.order_status=1 or o.order_status=2 or o.order_status=4)
and o.order_type=1
GROUP BY g.group_id
order by count(lg.group_id) LIMIT 5
  </select>
  <select id="getCityCount" resultMap="OrderResultMap">
    SELECT count(s.scenic_city)as count, ci.city_name from orders o left join line_group lg
on o.line_or_hotel_id=lg.id
left join `lines` l
on l.line_id=lg.line_id
left join scenics s
on l.line_scenic=s.scenic_id
left join city ci
on s.scenic_city=ci.city_id
where (o.order_status=1 or o.order_status=2 or o.order_status=4)
and o.order_type=1
GROUP BY ci.city_id
order by count LIMIT 5
  </select>
  <select id="getScenicCount" resultMap="OrderResultMap">
    SELECT  s.scenic_name,s.scenic_addr,ci.city_name,p.province_name ,(select count(c.scenic_strategy) from collect c where c.scenic_strategy=l.line_scenic and c.collect_type=1) as count
    from orders o left join line_group lg
    on o.line_or_hotel_id=lg.id
    left join `lines` l
    on l.line_id=lg.line_id
left join scenics s
on l.line_scenic=s.scenic_id
left join city ci
on s.scenic_city=ci.city_id
left join province p
on ci.province_id=p.province_id

where (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
and (o.order_type=1 or o.order_type IS NULL)
GROUP BY s.scenic_id
order by count DESC LIMIT 5
  </select>

  <select id="getLineCount" resultMap="OrderResultMap">
    SELECT  l.line_title,t.theme_name,count(lg.line_id) as count from orders o left join line_group lg
on o.line_or_hotel_id=lg.id
left join `lines` l
on l.line_id=lg.line_id
left join themes t
on l.theme_id=t.theme_id
 where (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    and (o.order_type=1 or o.order_type IS NULL)
GROUP BY l.line_id
order by count(lg.line_id) DESC LIMIT 8
  </select>

  <select id="getOrderDayWeekCount" resultMap="OrderResultMap">
    select d.*, ifnull(count(DATE_FORMAT(o.creat_time,'%m-%d')),0) as count  from
    (
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 7 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 6 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 5 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 4 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 3 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 2 DAY),'%m-%d') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY),'%m-%d') as days
    )d
    left join orders o
    on d.days=DATE_FORMAT(o.creat_time,'%m-%d')
		and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    GROUP BY d.days
  </select>
  <select id="getOrderDayONeCount" resultType="java.lang.Integer">
    SELECT count(order_id) count
    from (select * from orders where DATE_SUB(CURDATE(),INTERVAL 1 DAY)&lt;=date(orders.creat_time)
and (order_status=1 or order_status=2 or order_status=4 ) )as daty
  </select>
  <select id="getOrderDayToDayCount" resultType="java.lang.Integer">
   SELECT count(order_id) count
    from orders where creat_time=CURDATE()
    and (order_status=1 or order_status=2 or order_status=4)
  </select>
  <select id="getOrderSixMonth" resultMap="OrderResultMap">
    select d.*, ifnull(sum(o.order_total_price),0) as count  from
    (
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 7 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 8 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 5 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 4 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 3 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 2 MONTH),'%Y-%m') as days UNION
    SELECT DATE_FORMAT(DATE_SUB(CURDATE(),INTERVAL 1 MONTH),'%Y-%m') as days
    )d
    left join orders o
    on d.days=DATE_FORMAT(o.creat_time,'%Y-%m')
    and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    GROUP BY d.days
  </select>
  <select id="getOrderOneYear" resultMap="OrderResultMap">
    select d.*, ifnull(sum(o.order_total_price),0) as count  from
    (
    SELECT CONCAT(#{year},'-01') as days UNION
    SELECT CONCAT(#{year},'-02') as days UNION
    SELECT CONCAT(#{year},'-03') as days UNION
    SELECT CONCAT(#{year},'-04') as days UNION
    SELECT CONCAT(#{year},'-05') as days UNION
    SELECT CONCAT(#{year},'-06') as days UNION
    SELECT CONCAT(#{year},'-07') as days UNION
    SELECT CONCAT(#{year},'-08') as days UNION
    SELECT CONCAT(#{year},'-09') as days UNION
    SELECT CONCAT(#{year},'-10') as days UNION
    SELECT CONCAT(#{year},'-11') as days UNION
    SELECT CONCAT(#{year},'-12') as days
    )d
    left join orders o
    on d.days=DATE_FORMAT(o.creat_time,'%Y-%m')
    and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    <if test="year!=null and year!=''">
      and YEAR(o.creat_time)=#{year}
    </if>
    <if test="year==null or year==''">
      and YEAR(o.creat_time)=YEAR(NOW())
    </if>
    GROUP BY d.days
  </select>
  <select id="getOrderCountOneYearMonth" resultMap="OrderResultMap">
    select d.*, ifnull(count(o.order_id),0) as count  from
    (
    SELECT CONCAT(#{year},'-01') as days UNION
    SELECT CONCAT(#{year},'-02') as days UNION
    SELECT CONCAT(#{year},'-03') as days UNION
    SELECT CONCAT(#{year},'-04') as days UNION
    SELECT CONCAT(#{year},'-05') as days UNION
    SELECT CONCAT(#{year},'-06') as days UNION
    SELECT CONCAT(#{year},'-07') as days UNION
    SELECT CONCAT(#{year},'-08') as days UNION
    SELECT CONCAT(#{year},'-09') as days UNION
    SELECT CONCAT(#{year},'-10') as days UNION
    SELECT CONCAT(#{year},'-11') as days UNION
    SELECT CONCAT(#{year},'-12') as days
    )d
    left join orders o
    on d.days=DATE_FORMAT(o.creat_time,'%Y-%m')
    and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    <if test="year!=null and year!=''">
      and YEAR(o.creat_time)=#{year}
    </if>
    <if test="year==null or year==''">
      and YEAR(o.creat_time)=YEAR(NOW())
    </if>
    GROUP BY d.days
  </select>
  <select id="getOrderCountOneSeason" resultMap="OrderResultMap">
    select CONCAT('第',d.day2,'季度') as days, ifnull(count(o.order_id),0) as count  from
    (
    SELECT 1 as day2 UNION
    SELECT 2 as day2 UNION
    SELECT 3 as day2 UNION
    SELECT 4 as day2
    )d
    left join orders o
    on d.day2=FLOOR((date_format(o.creat_time, '%m')+2)/3)
    and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    <if test="year!=null and year!=''">
      and YEAR(o.creat_time)=#{year}
    </if>
    <if test="year==null or year==''">
      and YEAR(o.creat_time)=YEAR(NOW())
    </if>
    GROUP BY d.day2
  </select>
  <select id="getOrderOneSeason" resultMap="OrderResultMap">
    select CONCAT('第',d.day2,'季度') as days, ifnull(sum(o.order_total_price),0) as count  from
    (
    SELECT 1 as day2 UNION
    SELECT 2 as day2 UNION
    SELECT 3 as day2 UNION
    SELECT 4 as day2
    )d
    left join orders o
    on d.day2=FLOOR((date_format(o.creat_time, '%m')+2)/3)
    and (o.order_status=1 or o.order_status=2 or o.order_status=4 or o.order_status IS NULL)
    <if test="year!=null and year!=''">
      and YEAR(o.creat_time)=#{year}
    </if>
    <if test="year==null or year==''">
      and YEAR(o.creat_time)=YEAR(NOW())
    </if>
    GROUP BY d.day2
  </select>
  <update id="updateOrdersStatus" >
    update  orders
    set order_status=#{orderStatus,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>


</mapper>