<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.travel.travel.repository.S_commentsMapper">
  <resultMap id="BaseResultMap" type="com.travel.travel.entity.S_comments">
    <id column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="strategy_id" jdbcType="INTEGER" property="strategyId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
    <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="strategy_name" jdbcType="VARCHAR" property="strategyName" />
    <result column="user_head" jdbcType="VARCHAR" property="userHead" />
  </resultMap>
  <sql id="Base_Column_List">
    comment_id, strategy_id, user_id, comment_content, is_delete, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from s_comments
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    update s_comments
    set is_delete=1
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <insert id="insert" parameterType="com.travel.travel.entity.S_comments">
    insert into s_comments (strategy_id, user_id,
      comment_content, is_delete, create_time
      )
    values ( #{strategyId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
      #{commentContent,jdbcType=VARCHAR}, #{isDelete,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.travel.travel.entity.S_comments">
    insert into s_comments
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="strategyId != null">
        strategy_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="commentContent != null">
        comment_content,
      </if>
      <if test="isDelete != null">
        is_delete,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="strategyId != null">
        #{strategyId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="commentContent != null">
        #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.travel.travel.entity.S_comments">
    update s_comments
    <set>
      <if test="strategyId != null">
        strategy_id = #{strategyId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="commentContent != null">
        comment_content = #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null">
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.travel.travel.entity.S_comments">
    update s_comments
    set strategy_id = #{strategyId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      comment_content = #{commentContent,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <select id="getAllS_comments" resultMap="BaseResultMap">
    select sc.comment_id,
    sc.strategy_id,
    sc.user_id,
    sc.comment_content,
    sc.is_delete,
    sc.create_time,
    u.user_name,
    u.user_head,
    st.strategy_name
    from strategy st,users u,s_comments sc
    where ec.is_delete=0
    and ec.user_id=u.user_id
    and sc.strategy_id=st.strategy_id
    <if test="commentContent != null and commentContent!=''">
      and sc.comment_content like CONCAT ('%',#{commentContent,jdbcType=VARCHAR},'%')
    </if>
    order by sc.create_time limit #{current},#{size}
  </select>
  <select id="getAllCount" resultType="java.lang.Integer">
    select count(1)
    from strategy st,users u,s_comments sc
    where ec.is_delete=0
    and ec.user_id=u.user_id
    and sc.strategy_id=st.strategy_id
    <if test="commentContent != null and commentContent!=''">
      and sc.comment_content like CONCAT ('%',#{commentContent,jdbcType=VARCHAR},'%')
    </if>
  </select>

  <select id="getAllS_commentsById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select sc.comment_id,
    sc.strategy_id,
    sc.user_id,
    sc.comment_content,
    sc.is_delete,
    sc.create_time,
    u.user_name,
    u.user_head,
    st.strategy_name
    from strategy st,users u,s_comments sc
    where sc.is_delete=0
    and sc.user_id=u.user_id
    and sc.strategy_id=st.strategy_id
    and st.strategy_id =#{strategyId,jdbcType=INTEGER}
    order by sc.create_time limit #{current},#{size}
  </select>
  <select id="getAllCountById" resultType="java.lang.Integer">
    select count(1)
    from strategy st,users u,s_comments sc
    where sc.is_delete=0
    and sc.user_id=u.user_id
    and sc.strategy_id=st.strategy_id
  and st.strategy_id =#{strategyId,jdbcType=INTEGER}
  </select>
</mapper>